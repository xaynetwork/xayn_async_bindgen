name: Rust CI

on:
  push:
    paths:
      - '.github/workflows/rust_ci.yml'
      - 'async-bindgen/**'
      - 'async-bindgen-derive/**'
      - 'async-bindgen-gen-dart/**'
      - 'integration-tests-bindings/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  RUST_NIGHTLY: nightly-2022-05-19
  RUST_WORKSPACE: ${{ github.workspace }}/
  RUSTFLAGS: "-D warnings"
  DISABLE_AUTO_DART_FFIGEN: 1

jobs:
  cargo-format:
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3.0.2

      - name: Install rust toolchain
        working-directory: ${{ env.RUST_WORKSPACE }}
        run: rustup toolchain install ${{ env.RUST_NIGHTLY }} --component rustfmt

      - uses: Swatinem/rust-cache@cb2cf0cc7c5198d3364b9630e2c3d457f160790c # v1.4.0

      - name: cargo fmt
        working-directory: ${{ env.RUST_WORKSPACE }}
        run: cargo +${{ env.RUST_NIGHTLY }} fmt --all -- --check

  cargo-sort:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3.0.2

      - name: Install cargo-sort
        uses: ./.ci/install-cargo-sort

      - name: cargo sort
        run: cargo sort --grouped --workspace --check

  cargo-clippy:
    runs-on: ubuntu-20.04
    needs: cargo-format
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3.0.2

      - name: Install rust toolchain
        working-directory: ${{ env.RUST_WORKSPACE }}
        run: rustup show

      - uses: Swatinem/rust-cache@cb2cf0cc7c5198d3364b9630e2c3d457f160790c # v1.4.0

      - name: cargo clippy
        working-directory: ${{ env.RUST_WORKSPACE }}
        run: |
          # Workaround for code-gen bug
          cargo check --quiet 2>/dev/null || :
          cargo clippy --all-targets -- --deny warnings

  cargo-test:
    timeout-minutes: 20
    strategy:
      matrix:
        os:
          - ubuntu-20.04
          - macos-11
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3.0.2

      - name: Install rust toolchain
        working-directory: ${{ env.RUST_WORKSPACE }}
        run: rustup show

      - uses: Swatinem/rust-cache@cb2cf0cc7c5198d3364b9630e2c3d457f160790c # v1.4.0

      - name: Run tests
        working-directory: ${{ env.RUST_WORKSPACE }}
        run: |
          # Workaround for code-gen bug
          cargo check --quiet 2>/dev/null || :
          cargo test --all-targets --quiet
          cargo test --doc --quiet

  # this is an helper that needs all the real leafs of the workflow.
  # It makes easier notify_main_failure because we only need to check
  # for this job
  ci-ok:
    name: ci-ok
    needs:
      - cargo-test
    runs-on: ubuntu-20.04
    steps:
      - name: Nothing to do
        run: echo "Helper job nothing to do"

  notify-main-failure:
    name: notify-main-failure
    needs: ci-ok
    # always() allows to run even if ci-ok is not successful
    # we only want this to run on the main branch
    if: always() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-20.04
    steps:
      - name: Notify failure
        if: needs.ci-ok.result != 'success'
        uses: 8398a7/action-slack@a74b761b4089b5d730d813fbedcd2ec5d394f3af # v3.13.0
        with:
          status: custom
          fields: workflow, repo
          custom_payload: |
            {
              attachments: [{
                title: 'Main CI failed :warning:',
                color: 'danger',
                text: `CI: ${process.env.AS_WORKFLOW}\nRepository: ${process.env.AS_REPO}`,
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
