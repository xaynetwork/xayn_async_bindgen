name: Integration Test CI

on:
  push:
    paths:
      - '.github/workflows/integration_tests_ci.yml'
      - 'async-bindgen/**'
      - 'integration-tests-bindings/**'
      - 'integration_tests/**'
      - 'async_bindgen_dart_utils/**'


concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  DART_VERSION: '2.14.4'
  DART_TEST_WORKSPACE: ${{ github.workspace }}/integration_tests
  RUST_WORKSPACE: ${{ github.workspace }}/

jobs:
  dart-format:
    name: dart-format
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # v2.4.0

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - name: Install dart
        uses: dart-lang/setup-dart@6a218f2413a3e78e9087f638a238f6b40893203d # v1.3
        with:
          sdk: ${{ env.DART_VERSION }}

      - name: Check formatting
        working-directory: ${{ env.DART_TEST_WORKSPACE }}
        run: dart format --output=none --set-exit-if-changed .

  integration-tests:
    name: integration-tests
    needs: dart-format
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # v2.4.0

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - name: Install rust toolchain
        working-directory: ${{ env.RUST_WORKSPACE }}
        run: rustup show

      - uses: Swatinem/rust-cache@d12701459954fec471b2d34cdf7ea3374b026383 # v1

      - name: Install dart
        uses: dart-lang/setup-dart@6a218f2413a3e78e9087f638a238f6b40893203d # v1.3
        with:
          sdk: ${{ env.DART_VERSION }}

      - name: Install Dart dependencies
        working-directory: ${{ env.DART_TEST_WORKSPACE }}
        run: dart pub get

      - name: Install clang for ffigen
        run: sudo apt-get install libclang-10-dev

      - name: Build Rust
        working-directory: ${{ env.RUST_WORKSPACE }}
        run: |
          # Workaround for code-gen bug
          cargo check --quiet 2>/dev/null || :
          cargo build -p integration-tests-bindings

      - name: Unit test of integration test crate
        working-directory: ${{ env.RUST_WORKSPACE }}
        run: cargo test -p integration-tests-bindings

      - name: Generate dart code
        working-directory: ${{ env.RUST_WORKSPACE }}
        run: cargo run -p async-bindgen-gen-dart -- --ffi-class IntegrationTestsFfi --genesis ${DART_TEST_WORKSPACE}/lib/src/genesis.ffigen.dart

      - name: Analyze code
        working-directory: ${{ env.DART_TEST_WORKSPACE }}
        # We want to analyze code referring to `.ffigen.dart` files
        # which we only generate through rust because it's based
        # on macro generated code from rust.
        run: dart analyze --fatal-infos

      - name: Run tests
        working-directory: ${{ env.DART_TEST_WORKSPACE }}
        run: dart test

  # this is an helper that needs all the real leafs of the workflow.
  # It makes easier notify_main_failure because we only need to check
  # for this job
  ci-ok:
    name: ci-ok
    needs:
      - integration-tests
    runs-on: ubuntu-20.04
    steps:
      - name: Nothing to do
        run: echo "Helper job nothing to do"

  notify-main-failure:
    name: notify-main-failure
    needs: ci-ok
    # always() allows to run even if ci-ok is not successful
    # we only want this to run on the main branch
    if: always() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-20.04
    steps:
      - name: Notify failure
        if: needs.ci-ok.result != 'success'
        uses: 8398a7/action-slack@b17d9de8e9ed64b041e4fac845d6fdb2be6b9b04 # v3.11.0
        with:
          status: custom
          fields: workflow, repo
          custom_payload: |
            {
              attachments: [{
                title: 'Main CI failed :warning:',
                color: 'danger',
                text: `CI: ${process.env.AS_WORKFLOW}\nRepository: ${process.env.AS_REPO}`,
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
